#include <iostream>
#include <vector>
#include<algorithm>
using namespace std;

vector<int> findLeaders(vector<int>& arr) {
    int n = arr.size();
    vector<int> leaders;
    
    int max_from_right = arr[n - 1];
    leaders.push_back(max_from_right);  // Last element is always a leader

    // Traverse from second last to first
    for (int i = n - 2; i >= 0; i--) {
        if (arr[i] >= max_from_right) {
            max_from_right = arr[i];
            leaders.push_back(arr[i]);
        }
    }

    // Leaders are collected in reverse, so reverse them
    reverse(leaders.begin(), leaders.end());
    return leaders;
}

int main() {
    vector<int> arr = {16, 17, 4, 3, 5, 2};
    vector<int> result = findLeaders(arr);

    cout << "Leaders in the array: ";
    for (int val : result)
        cout << val << " ";
    cout << endl;

    return 0;
}
